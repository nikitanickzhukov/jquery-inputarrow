{"version":3,"sources":["../../../../../../node_modules/browser-pack/_prelude.js","src/main.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","$","defaults","min","max","Infinity","step","emptyOnMin","renderPrev","input","document","createElement","addClass","html","insertBefore","renderNext","insertAfter","encodeValue","decodeValue","onChange","onIterate","disabledClassName","comma","gradientFactor","gradientDefault","gradientMax","delay","interval","prop","window","Symbol","undefined","InputArrow","options","_this","this","_classCallCheck","opt","extend","$input","$prev","$next","on","startCounting","__isStarted","__isCounting","stopCounting","__clearCounting","count","__checkChange","check","__currentGrad","fit","_createClass","key","value","k","console","log","getValue","newValue","__round","setValue","trigger","_this2","__delayTimer","setTimeout","__oldValue","__currentValue","__incTimer","setInterval","__iterateCounting","clearInterval","stop","__incGrad","clearTimeout","TypeError","parseFloat","toString","replace","removeClass","Math","round","destroy","off","remove","fn","inputarrow","arg","_len","arguments","args","Array","_key","get","test","res","apply","push","_res","_i","attrs","eq","attr","jQuery"],"mappings":"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","file":"../jquery.inputarrow.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict';\n\n/* global jQuery */\n\n(function($) {\n    let defaults = {\n        min: 0,\n        max: Infinity,\n        step: 1,\n        emptyOnMin: false,\n        renderPrev(input) {\n            return $(document.createElement('span')).addClass('inputarrow-prev').html('<').insertBefore(input);\n        },\n        renderNext(input) {\n            return $(document.createElement('span')).addClass('inputarrow-next').html('>').insertAfter(input);\n        },\n        encodeValue: null,\n        decodeValue: null,\n        onChange: null,\n        onIterate: null,\n        disabledClassName: 'inputarrow-disabled',\n        comma: false,\n        gradientFactor: 1.1,\n        gradientDefault: 1,\n        gradientMax: 20,\n        delay: 300,\n        interval: 120\n    };\n\n    let prop = (window.Symbol !== undefined) ? window.Symbol('inputarrow') : '__inputarrow';\n\n\n    /** Class representing an inputarrow handler. */\n    class InputArrow {\n        /**\n         * Create an instance, setup plugin.\n         * @param {HTMLInputElement} input - html element.\n         * @param {object} options - settings.\n         */\n        constructor(input, options) {\n            this.input = input;\n            this.opt = $.extend({}, defaults, options);\n\n            this.$input = $(this.input);\n            this.$prev = this.opt.renderPrev.call(this, this.input);\n            this.$next = this.opt.renderNext.call(this, this.input);\n\n            this.$prev.on('mousedown touchstart', () => {\n                this.startCounting(-1);\n            }).on('mouseup mouseout touchend', () => {\n                if (this.__isStarted) {\n                    if (this.__isCounting) {\n                        this.stopCounting();\n                    } else {\n                        this.__clearCounting();\n                        this.count(-1);\n                    }\n                }\n            });\n\n            this.$next.on('mousedown touchstart', () => {\n                this.startCounting(1);\n            }).on('mouseup mouseout touchend', () => {\n                if (this.__isStarted) {\n                    if (this.__isCounting) {\n                        this.stopCounting();\n                    } else {\n                        this.__clearCounting();\n                        this.count(1);\n                    }\n                }\n            });\n\n            this.__checkChange = () => {\n                this.check();\n            };\n            this.$input.on('change', this.__checkChange);\n\n            this.__currentGrad = this.opt.gradientDefault;\n\n            this.fit();\n            this.check();\n        }\n        /**\n         * Single increment or decrement value.\n         * @public\n         * @param {number} k - coefficient (-1 for decrementing, +1 for incrementing).\n         */\n        count(k) {\n            console.log('count', k);\n\n            let value = this.getValue();\n            let newValue = this.__round(value + k * this.opt.step);\n\n            if (newValue < this.opt.min) {\n                newValue = this.opt.min;\n            } else if (newValue > this.opt.max) {\n                newValue = this.opt.max;\n            }\n\n            console.log('old value:', value, 'new value:', newValue);\n\n            if (newValue !== value) {\n                this.setValue(newValue);\n                this.$input.trigger('change');\n                if (this.opt.onChange) {\n                    this.opt.onChange.call(this, newValue, value);\n                }\n            }\n        }\n        /**\n         * Start fluent incrementing or decrementing value.\n         * @public\n         * @param {number} k - coefficient (-1 for decrementing, +1 for incrementing).\n         */\n        startCounting(k) {\n            this.__isStarted = true;\n            this.__delayTimer = setTimeout(() => {\n                console.log('startCounting', k);\n\n                this.__isCounting = true;\n                this.__oldValue = this.__currentValue = this.getValue();\n                this.__currentGrad = this.opt.gradientDefault;\n\n                this.__incTimer = setInterval(() => {\n                    this.__iterateCounting(k);\n                }, this.opt.interval);\n            }, this.opt.delay);\n        }\n        /**\n         * Stop fluent incrementing or decrementing value.\n         * @public\n         */\n        stopCounting() {\n            this.__clearCounting();\n\n            if (this.__isCounting) {\n                console.log('stopCounting');\n\n                this.__isCounting = false;\n                clearInterval(this.__incTimer);\n\n                let value = this.getValue();\n\n                if (value !== this.__oldValue) {\n                    this.$input.trigger('change');\n                    if (this.opt.onChange) {\n                        this.opt.onChange.call(this, value, this.__oldValue);\n                    }\n                }\n            }\n        }\n        /**\n         * Process incrementing or decrementing value for each iteration.\n         * @private\n         * @param {number} k - coefficient (-1 for decrementing, +1 for incrementing).\n         */\n        __iterateCounting(k) {\n            this.__currentValue += k * this.opt.step * this.__currentGrad;\n\n            let newValue = this.__round(this.__currentValue);\n\n            let stop = false;\n            if (newValue < this.opt.min) {\n                newValue = this.opt.min;\n                stop = true;\n            } else if (newValue > this.opt.max) {\n                newValue = this.opt.max;\n                stop = true;\n            }\n\n            let value = this.getValue();\n\n            console.log('old value:', value, 'new value', newValue);\n\n            if (newValue !== value) {\n                this.setValue(newValue);\n                this.check();\n                if (this.opt.onIterate) {\n                    this.opt.onIterate.call(this, newValue, value);\n                }\n            }\n\n            if (stop) {\n                this.stopCounting();\n            } else {\n                this.__incGrad();\n            }\n        }\n        /**\n         * Clear timer for delayed start.\n         * @private\n         */\n        __clearCounting() {\n            if (this.__isStarted) {\n                this.__isStarted = false;\n                clearTimeout(this.__delayTimer);\n            }\n        }\n        /**\n         * Set next coefficient for fluent incrementing or decrementing.\n         * @private\n         */\n        __incGrad() {\n            if (this.__currentGrad < this.opt.gradientMax) {\n                this.__currentGrad *= this.opt.gradientFactor;\n            }\n            if (this.__currentGrad > this.opt.gradientMax) {\n                this.__currentGrad = this.opt.gradientMax;\n            }\n        }\n        /**\n         * Get value from input.\n         * @public\n         * @return {number} The value.\n         */\n        getValue() {\n            let value = this.input.value;\n\n            if (this.opt.encodeValue) {\n                value = this.opt.encodeValue.call(this, value);\n            }\n\n            if (value === '') {\n                if (!this.opt.emptyOnMin) {\n                    throw new TypeError('Can\\'t convert empty string to value');\n                }\n                return this.opt.min;\n            } else {\n                return parseFloat(this.opt.comma ? value.toString().replace(/,/, '.') : value);\n            }\n        }\n        /**\n         * Set value for input.\n         * @public\n         * @param {number} value.\n         */\n        setValue(value) {\n            if (this.opt.decodeValue) {\n                value = this.opt.decodeValue.call(this, value);\n            }\n\n            if (value === this.opt.min && this.opt.emptyOnMin) {\n                this.input.value = '';\n            } else {\n                this.input.value = this.opt.comma ? value.toString().replace(/\\./, ',') : value;\n            }\n        }\n        /**\n         * Fit input value for current constraints (min, max).\n         * @public\n         */\n        fit() {\n            let value = this.getValue();\n            if (value < this.opt.min) {\n                value = this.opt.min;\n            }\n            if (value > this.opt.max) {\n                value = this.opt.max;\n            }\n            this.setValue(value);\n        }\n        /**\n         * Check arrows for availability using min and max options.\n         * @public\n         */\n        check() {\n            let value = this.getValue();\n\n            console.log('check:', value);\n\n            if (value <= this.opt.min) {\n                this.$prev.addClass(this.opt.disabledClassName);\n            } else {\n                this.$prev.removeClass(this.opt.disabledClassName);\n            }\n\n            if (value >= this.opt.max) {\n                this.$next.addClass(this.opt.disabledClassName);\n            } else {\n                this.$next.removeClass(this.opt.disabledClassName);\n            }\n        }\n        /**\n         * Round value using step option.\n         * @private\n         * @return {number} The rounded value.\n         */\n        __round(value) {\n            return Math.round(value / this.opt.step) * this.opt.step;\n        }\n        /**\n         * Destroy all created elements and unbind connected events.\n         * @public\n         */\n        destroy() {\n            console.log('destroy');\n\n            this.$input.off('change', this.__checkChange);\n            this.$prev.remove();\n            this.$next.remove();\n        }\n    }\n\n    $.fn.extend({\n        inputarrow: function(arg, ...args) {\n            if (typeof arg === 'string') {\n                let value = [];\n\n                for (let i = 0; i < this.length; i ++) {\n                    let inputarrow = this.get(i)[prop];\n                    if (inputarrow) {\n                        if (typeof inputarrow[arg] !== 'undefined') {\n                            if (/^_/.test(arg)) {\n                                throw new Error(`Can't call ${arg}: it isn't public`);\n                            } else if (typeof inputarrow[arg] === 'function') {\n                                let res = inputarrow[arg].apply(inputarrow, args);\n                                value.push(res);\n\n                                if (arg === 'destroy') {\n                                    delete this.get(i)[prop];\n                                }\n                            } else {\n                                let res = inputarrow[arg];\n                                value.push(res);\n                            }\n                        } else {\n                            throw new Error(`Can't call ${arg}: no such method or property`);\n                        }\n                    } else {\n                        throw new Error(`Can't call ${arg}: InputArrow is not initialized`);\n                    }\n                }\n\n                if (value.length === 1) {\n                    return value[0];\n                } else {\n                    return value;\n                }\n            } else {\n                for (let i = 0; i < this.length; i ++) {\n                    let attrs = {},\n                        min = this.eq(i).attr('min'),\n                        max = this.eq(i).attr('max'),\n                        step = this.eq(i).attr('step');\n\n                    if (typeof min !== 'undefined' && min !== '') {\n                        attrs.min = parseFloat(min);\n                    }\n                    if (typeof max !== 'undefined' && max !== '') {\n                        attrs.max = parseFloat(max);\n                    }\n                    if (typeof step !== 'undefined' && step !== '' && step !== 'any') {\n                        attrs.step = parseFloat(step);\n                    }\n\n                    if (this.get(i)[prop]) {\n                        throw new Error('InputArrow is already initialized');\n                    }\n\n                    this.get(i)[prop] = new InputArrow(this.get(i), $.extend({}, attrs, arg));\n                }\n\n                return this;\n            }\n        }\n    });\n})(jQuery);\n"]}