{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/main.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","$","defaults","prop","InputArrow","input","options","_this","this","_classCallCheck","opt","extend","$input","$prev","renderPrev","$next","renderNext","on","__getTouchStartEvent","__isStarted","startCounting","__getTouchEndEvent","__isCounting","stopCounting","__clearCounting","count","__checkChange","check","__currentGrad","gradientDefault","fit","jQuery","min","max","Infinity","step","emptyOnMin","document","createElement","addClass","html","insertBefore","insertAfter","encodeValue","decodeValue","onChange","onIterate","disabledClassName","comma","gradientFactor","gradientMax","delay","interval","window","Symbol","_createClass","key","value","k","getValue","newValue","__round","setValue","trigger","_this2","__delayTimer","setTimeout","__oldValue","__currentValue","__incTimer","setInterval","__iterateCounting","clearInterval","__isTouchDevice","navigator","msMaxTouchPoints","stop","__incGrad","clearTimeout","parseFloat","toString","replace","TypeError","removeClass","Math","round","off","remove","fn","inputarrow","arg","_i","attrs","eq","attr","get","_len","arguments","args","Array","_key","_res","test","res","apply","push"],"mappings":"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","file":"../jquery.inputarrow.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","'use strict';\n\n/* global jQuery */\n\n(function($) {\n    let defaults = {\n        min: 0,\n        max: Infinity,\n        step: 1,\n        emptyOnMin: false,\n        renderPrev(input) {\n            return $(document.createElement('span')).addClass('inputarrow-prev').html('<').insertBefore(input);\n        },\n        renderNext(input) {\n            return $(document.createElement('span')).addClass('inputarrow-next').html('>').insertAfter(input);\n        },\n        encodeValue: null,\n        decodeValue: null,\n        onChange: null,\n        onIterate: null,\n        disabledClassName: 'inputarrow-disabled',\n        comma: false,\n        gradientFactor: 1.1,\n        gradientDefault: 1,\n        gradientMax: 20,\n        delay: 300,\n        interval: 120\n    };\n\n    let prop = window.Symbol ? window.Symbol('inputarrow') : '__inputarrow';\n\n\n    /** Class representing an inputarrow handler. */\n    class InputArrow {\n        /**\n         * Create an instance, setup plugin.\n         * @param {HTMLInputElement} input - html element.\n         * @param {object} options - settings.\n         */\n        constructor(input, options) {\n            this.input = input;\n            this.opt = $.extend({}, defaults, options);\n\n            this.$input = $(this.input);\n            this.$prev = this.opt.renderPrev.call(this, this.input);\n            this.$next = this.opt.renderNext.call(this, this.input);\n\n            this.$prev.on(this.__getTouchStartEvent(), () => {\n                if (!this.__isStarted) {\n                    this.startCounting(-1);\n                }\n            }).on(this.__getTouchEndEvent(), () => {\n                if (this.__isStarted) {\n                    if (this.__isCounting) {\n                        this.stopCounting();\n                    } else {\n                        this.__clearCounting();\n                        this.count(-1);\n                    }\n                }\n            });\n\n            this.$next.on(this.__getTouchStartEvent(), () => {\n                if (!this.__isStarted) {\n                    this.startCounting(1);\n                }\n            }).on(this.__getTouchEndEvent(), () => {\n                if (this.__isStarted) {\n                    if (this.__isCounting) {\n                        this.stopCounting();\n                    } else {\n                        this.__clearCounting();\n                        this.count(1);\n                    }\n                }\n            });\n\n            this.__checkChange = () => {\n                this.check();\n            };\n            this.$input.on('change', this.__checkChange);\n\n            this.__currentGrad = this.opt.gradientDefault;\n\n            this.fit();\n            this.check();\n        }\n        /**\n         * Single increment or decrement value.\n         * @public\n         * @param {number} k - coefficient (-1 for decrementing, +1 for incrementing).\n         */\n        count(k) {\n            let value = this.getValue();\n            let newValue = this.__round(value + k * this.opt.step);\n\n            if (newValue < this.opt.min) {\n                newValue = this.opt.min;\n            } else if (newValue > this.opt.max) {\n                newValue = this.opt.max;\n            }\n\n            if (newValue !== value) {\n                this.setValue(newValue);\n                this.$input.trigger('change');\n                if (this.opt.onChange) {\n                    this.opt.onChange.call(this, newValue, value);\n                }\n            }\n        }\n        /**\n         * Start fluent incrementing or decrementing value.\n         * @public\n         * @param {number} k - coefficient (-1 for decrementing, +1 for incrementing).\n         */\n        startCounting(k) {\n            this.__isStarted = true;\n            this.__delayTimer = setTimeout(() => {\n                this.__isCounting = true;\n                this.__oldValue = this.__currentValue = this.getValue();\n                this.__currentGrad = this.opt.gradientDefault;\n\n                this.__incTimer = setInterval(() => {\n                    this.__iterateCounting(k);\n                }, this.opt.interval);\n            }, this.opt.delay);\n        }\n        /**\n         * Stop fluent incrementing or decrementing value.\n         * @public\n         */\n        stopCounting() {\n            this.__clearCounting();\n\n            if (this.__isCounting) {\n                this.__isCounting = false;\n                clearInterval(this.__incTimer);\n\n                let value = this.getValue();\n\n                if (value !== this.__oldValue) {\n                    this.$input.trigger('change');\n                    if (this.opt.onChange) {\n                        this.opt.onChange.call(this, value, this.__oldValue);\n                    }\n                }\n            }\n        }\n        /**\n         * Get event(s) which must be used as a touch start for controls.\n         * @private\n         * @return {string} The event name (or names separated by spaces).\n         */\n        __getTouchStartEvent() {\n            return this.__isTouchDevice() ? 'touchstart' : 'mousedown';\n        }\n        /**\n         * Get event(s) which must be used as a touch end for controls.\n         * @private\n         * @return {string} The event name (or names separated by spaces).\n         */\n        __getTouchEndEvent() {\n            return this.__isTouchDevice() ? 'touchend' : 'mouseup mouseout';\n        }\n        /**\n         * Returns true if we must operate touch events for mobile devices, false otherwise.\n         * @private\n         * @return {boolean} The value.\n         */\n        __isTouchDevice() {\n            return ('ontouchstart' in window) || navigator.msMaxTouchPoints;\n        }\n        /**\n         * Process incrementing or decrementing value for each iteration.\n         * @private\n         * @param {number} k - coefficient (-1 for decrementing, +1 for incrementing).\n         */\n        __iterateCounting(k) {\n            this.__currentValue += k * this.opt.step * this.__currentGrad;\n\n            let newValue = this.__round(this.__currentValue);\n\n            let stop = false;\n            if (newValue < this.opt.min) {\n                newValue = this.opt.min;\n                stop = true;\n            } else if (newValue > this.opt.max) {\n                newValue = this.opt.max;\n                stop = true;\n            }\n\n            let value = this.getValue();\n\n            if (newValue !== value) {\n                this.setValue(newValue);\n                this.check();\n                if (this.opt.onIterate) {\n                    this.opt.onIterate.call(this, newValue, value);\n                }\n            }\n\n            if (stop) {\n                this.stopCounting();\n            } else {\n                this.__incGrad();\n            }\n        }\n        /**\n         * Clear timer for delayed start.\n         * @private\n         */\n        __clearCounting() {\n            if (this.__isStarted) {\n                this.__isStarted = false;\n                clearTimeout(this.__delayTimer);\n            }\n        }\n        /**\n         * Set next coefficient for fluent incrementing or decrementing.\n         * @private\n         */\n        __incGrad() {\n            if (this.__currentGrad < this.opt.gradientMax) {\n                this.__currentGrad *= this.opt.gradientFactor;\n            }\n            if (this.__currentGrad > this.opt.gradientMax) {\n                this.__currentGrad = this.opt.gradientMax;\n            }\n        }\n        /**\n         * Get value from input.\n         * @public\n         * @return {number} The value.\n         */\n        getValue() {\n            let value = this.input.value;\n\n            if (this.opt.encodeValue) {\n                value = this.opt.encodeValue.call(this, value);\n            }\n\n            if (value === '') {\n                if (!this.opt.emptyOnMin) {\n                    throw new TypeError('Can\\'t convert empty string to value');\n                }\n                return this.opt.min;\n            } else {\n                return parseFloat(this.opt.comma ? value.toString().replace(/,/, '.') : value);\n            }\n        }\n        /**\n         * Set value for input.\n         * @public\n         * @param {number} value.\n         */\n        setValue(value) {\n            if (this.opt.decodeValue) {\n                value = this.opt.decodeValue.call(this, value);\n            }\n\n            if (value === this.opt.min && this.opt.emptyOnMin) {\n                this.input.value = '';\n            } else {\n                this.input.value = this.opt.comma ? value.toString().replace(/\\./, ',') : value;\n            }\n        }\n        /**\n         * Fit input value for current constraints (min, max).\n         * @public\n         */\n        fit() {\n            let value = this.getValue();\n            if (value < this.opt.min) {\n                value = this.opt.min;\n            }\n            if (value > this.opt.max) {\n                value = this.opt.max;\n            }\n            this.setValue(value);\n        }\n        /**\n         * Check arrows for availability using min and max options.\n         * @public\n         */\n        check() {\n            let value = this.getValue();\n\n            if (value <= this.opt.min) {\n                this.$prev.addClass(this.opt.disabledClassName);\n            } else {\n                this.$prev.removeClass(this.opt.disabledClassName);\n            }\n\n            if (value >= this.opt.max) {\n                this.$next.addClass(this.opt.disabledClassName);\n            } else {\n                this.$next.removeClass(this.opt.disabledClassName);\n            }\n        }\n        /**\n         * Round value using step option.\n         * @private\n         * @return {number} The rounded value.\n         */\n        __round(value) {\n            return Math.round(value / this.opt.step) * this.opt.step;\n        }\n        /**\n         * Destroy all created elements and unbind connected events.\n         * @public\n         */\n        destroy() {\n            this.$input.off('change', this.__checkChange);\n            this.$prev.remove();\n            this.$next.remove();\n        }\n    }\n\n    $.fn.extend({\n        inputarrow: function(arg, ...args) {\n            if (typeof arg === 'string') {\n                let value = [];\n\n                for (let i = 0; i < this.length; i ++) {\n                    let inputarrow = this.get(i)[prop];\n                    if (inputarrow) {\n                        if (typeof inputarrow[arg] !== 'undefined') {\n                            if (/^_/.test(arg)) {\n                                throw new Error(`Can't call ${arg}: it isn't public`);\n                            } else if (typeof inputarrow[arg] === 'function') {\n                                let res = inputarrow[arg].apply(inputarrow, args);\n                                value.push(res);\n\n                                if (arg === 'destroy') {\n                                    delete this.get(i)[prop];\n                                }\n                            } else {\n                                let res = inputarrow[arg];\n                                value.push(res);\n                            }\n                        } else {\n                            throw new Error(`Can't call ${arg}: no such method or property`);\n                        }\n                    } else {\n                        throw new Error(`Can't call ${arg}: InputArrow is not initialized`);\n                    }\n                }\n\n                if (this.length === 0) {\n                    return undefined;\n                } else if (this.length === 1) {\n                    return value[0];\n                } else {\n                    return value;\n                }\n            } else {\n                for (let i = 0; i < this.length; i ++) {\n                    let attrs = {},\n                        min = this.eq(i).attr('min'),\n                        max = this.eq(i).attr('max'),\n                        step = this.eq(i).attr('step');\n\n                    if (typeof min !== 'undefined' && min !== '') {\n                        attrs.min = parseFloat(min);\n                    }\n                    if (typeof max !== 'undefined' && max !== '') {\n                        attrs.max = parseFloat(max);\n                    }\n                    if (typeof step !== 'undefined' && step !== '' && step !== 'any') {\n                        attrs.step = parseFloat(step);\n                    }\n\n                    if (this.get(i)[prop]) {\n                        throw new Error('InputArrow is already initialized');\n                    }\n\n                    this.get(i)[prop] = new InputArrow(this.get(i), $.extend({}, attrs, arg));\n                }\n\n                return this;\n            }\n        }\n    });\n})(jQuery);\n"]}